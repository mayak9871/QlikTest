// test
// -- 11072018 - Dimitar Prodanov version 1 for sense 
/*
	Този файл изчита настройката и подготвя таблица с включените таблици в съответния екстрактор
*/
Sub GetTablesToExtract(vL._Server, vL.ExtractName)
$(Include=$(vG.SubPath)1.fileexist.qvs);

	Call vL.FileExist('$(vG.$(vL._Server)ConfigPath)Repository.Extract.xlsx')
	If vL.FileExist='false' Then
		Set vL.RepositoryPath = '$(vG.SharedConfigPath)Repository.Extract.xlsx' ;
	Else
		Set vL.RepositoryPath = '$(vG.$(vL._Server)ConfigPath)Repository.Extract.xlsx' ;
	End IF

	dbDesc: NoConcatenate
	Load Distinct
		[Source type], [DB Type]
	From
		[$(vL.RepositoryPath)]	(ooxml, embedded labels, table is [Data sources])
	WHERE
		(Server = '$(vL._Server)' And [Extractor name] = '$(vL.ExtractName)' And Inactive='No')
	;
	
		Left Join (dbDesc)
		Load
			[DB Type]
			, [Desc SQL]
		From
			[$(vL.RepositoryPath)]	(ooxml, embedded labels, table is [DB Desc])
		;			
	
	Let vL.dbType = Peek('Source type',-1,'dbDesc');
	Let vL.dbDescSQL = Peek('Desc SQL',-1,'dbDesc');
	Trace vL.dbType = $(vL.dbType): vL.dbDescSQL = $(vL.dbDescSQL);
	drop Table dbDesc;
	
	If '$(vL.dbType)'='SQL Table' Then
		Call getDBCatalog('$(vL.dbDescSQL)')
	End if
	
	tmp.1:
	LOAD 
		Server
		, [QVD Name]
		, [Extractor name]
		, [Source type]
		, If([Source type]='SQL Table', Upper([Data catalog]))	as [Data catalog]
		, If([Source type]='SQL Table', Upper([Data schema]))	as [Data schema]
		, If([Source type]='SQL Table', Upper(Datasource))		as [Tables]
		, IF([Source type]='SQL Table'
			, If(Len([Data catalog])=0
				, If(Len([Data schema])=0
					, PurgeChar(Datasource,'"')
					, PurgeChar([Data schema],'"')&'.'&PurgeChar(Datasource,'"'))
				, If(Len([Data schema])=0
					, [Data catalog]&'.'&PurgeChar(Datasource,'"')
					, [Data catalog]&'.'&[Data schema]&'.'&Datasource))
			, Datasource)		as Datasource
		, Description
		, [Update mode]
		, if(([Update mode]='Full' or '$(vL.UI.UpdateMode)'='Full'), [Initial Load], [Delta Load]) as [SQL Delta Filter]
		, [Unique Value]
	FROM
		[$(vL.RepositoryPath)]	(ooxml, embedded labels, table is [Data sources])
	WHERE
		(Server = '$(vL._Server)' And [Extractor name] = '$(vL.ExtractName)' And Inactive='No')
	;
	
	// ------- comment table
	map.TablesComment: Mapping
	Load
		[QVD Name]
		, Description
	Resident
		tmp.1
	;

		Inner join (tmp.1)
		LOAD Distinct
			Server
			, [QVD Name]
			, Num(RowNo()) as so
			, If(IsNull([DB Fields]), Null(), [DB Fields])										as [DB Fields]
			, if(IsNull([QV Load function]) or [QV Load function]='FULL TABLE'
				, Null(), [QV Load function] & ' as [' & PurgeChar([QV Field Name],'[]') & ']')	as [QV Fields]
			, If(WildMatch([Data type],'1*')
				, SubField(PurgeChar([QV Field Name], '[]'), ','))								as QVField.Key
			, if(IsNull([QV Load function]) or [QV Load function]='FULL TABLE'
				, Null(), '[' & PurgeChar([QV Field Name],'[]') & ']')							as [QV Field Name]
			, [Field Description]
		FROM
			[$(vL.RepositoryPath)]	(ooxml, embedded labels, table is [Data fields])
		WHERE
			([In Use] = '1')
		;
		
		If '$(vL.dbType)'='SQL Table' Then
			tmp.2: NoConcatenate
			Load
				*
			Where
				Exists(Tables,TABLE_NAME)
			; Load
				Upper(TABLE_CATALOG) as TABLE_CATALOG, Upper(TABLE_SCHEMA) as TABLE_SCHEMA, Upper(TABLE_NAME) as TABLE_NAME
				, COLUMN_NAME
			From
				[$(vG.$(vL._Server)ExtractPath)$(vL.tblDesc.File).qvd] (qvd)
			Where
				Not IsNull(PRIMARY_KEY)
			;
		End If
		
		If NoOfRows('tmp.2') Then
			tmp.3: NoConcatenate
			Load Distinct
				Server
				, [QVD Name]
				, [Extractor name]
				, [Source type]
				, [Data catalog], [Data schema], [Tables]
				, Datasource
				, Description
				, [Update mode]
				, [SQL Delta Filter]
				, [Unique Value]
			Resident
				tmp.1
			Where
				Exists(TABLE_NAME, Tables)
			;
			
				Left Join (tmp.3)
				Load
					TABLE_CATALOG as [Data catalog], TABLE_SCHEMA as [Data schema], TABLE_NAME as [Tables]
					, COLUMN_NAME										AS [DB Fields]
					, ApplyMap('map.FieldType', AutoNumberHash128(TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME), '([')
						& COLUMN_NAME & ']) AS [' & COLUMN_NAME &']'	AS [QV Fields]
					, Null() as QVField.Key
					, '[' & COLUMN_NAME & ']'							as [QV Field Name]
					, 'Primary key'										as [Field Description]
				Resident
					tmp.2
				; Drop Table tmp.2
				;
				
			Concatenate (tmp.1)
			Load
				*
			Resident
				tmp.3
			; Drop table tmp.3
			;
		Else
			If TableNumber('tmp.2') Then
				Drop table tmp.2;
			End if
		End If
	
	map.FieldsComment: Mapping
	Load
		PurgeChar([QV Field Name],'[]"')
		, [Field Description]
	Resident
		tmp.1
	Where
		Not Len([Field Description])=0
	;
	
	If '$(vL.dbType)'='SQL Table' Then
			tmp.2: NoConcatenate
			Load
				TABLE_NAME
				, COLUMN_NAME
				, DESCRIPTION
			From
				[$(vG.$(vL._Server)ExtractPath)$(vL.tblDesc.File).qvd] (qvd)
			Where
				Exists([Tables], TABLE_NAME)
			;
				
		map.FieldDBComment: Mapping
		Load
			COLUMN_NAME, DESCRIPTION
		Resident
			tmp.2
		Where
			Not Len(DESCRIPTION) = 0
		; Drop table tmp.2
		;
	End If
	
	If '$(vL.dbType)'='SQL Table' Then
		Set vL.fldType = 'ApplyMap(''map.FieldType'', AutoNumberHash128(Upper([Data catalog]), Upper([Data schema]), Upper([Tables]), Upper(PurgeChar([DB Fields],''"[]''))), ''(['') & PurgeChar([DB Fields],''[]"'') & '']) as ['' & PurgeChar([QV Field Name],''[]'') & '']''' ;
	Else
		Set vL.fldType = ''' ''' ;
	End If
	
	Extractors: NoConcatenate
	Load
		[Extractor name]
		, [QVD Name]
		, Server
		, [Source type]
		, Datasource
		, Description
		, [Update mode]
		, [SQL Delta Filter]
		, [Unique Value]
		, Concat(DISTINCT [DB Fields],',',so)			as Script.SQL
		, Concat(DISTINCT
			If(WildMatch([QV Fields],'DB Format*') and [Source type]='SQL Table'
				, $(vL.fldType)
				, [QV Fields])
			, ',', so)									as Script.Load
		, Concat(DISTINCT If(Len(QVField.Key), '['&QVField.Key&']'), ',', so)				as Delta.Key
		, Concat(DISTINCT [QV Field Name], ',', so)		as All.Table.Fields
	Resident
		tmp.1
	Group By
		Server
		, [Source type]
		, Datasource
		, Description
		, [Update mode]
		, [SQL Delta Filter]
		, [QVD Name]
		, [Extractor name]
		, [Unique Value]
	; Drop Table tmp.1
	;
	

// -------- create mappings	
	tmp.1:
	LOAD
		Name, Script
	FROM
		[$(vL.RepositoryPath)] (ooxml, embedded labels, table is Mappings)
	Where
		Inactive = 'No'
	;

	For r=0 to NoOfRows('tmp.1')-1
		Let vL.map.Name = Peek('Name', r, 'tmp.1') ;
		Let vL.map.Script = Peek('Script', r, 'tmp.1') ;
		
		$(vL.map.Name): Mapping
		$(vL.map.Script)
		;
	Next
	Drop table tmp.1;

	Let vL.RepositoryPath = Null() ;

End Sub

Sub getDBCatalog(vL._SourceSQL)

	Let vL.tblDesc.File = 'tblDesc.' & Replace(DocumentTitle(),'.qvw','');
	Let vL._tableDesc = PurgeChar(vL.Table,'`"\[]');
		
	If QvdCreateTime('$(vG.$(vL.UI.Server)ExtractPath)$(vL.tblDesc.File).qvd') < vL.app.StartLoad or IsNull(QvdCreateTime('$(vG.$(vL.UI.Server)ExtractPath)$(vL.tblDesc.File).qvd')) Then
		// ----- get table definition
		[tmp.1]:
		Load *; $(vL._SourceSQL);

		Let vL.tblCat = FieldName(1,'tmp.1');
		Let vL.tblSchema = FieldName(2,'tmp.1');
		Let vL.clmnDesc = If(RangeSum(FieldNumber('DESCRIPTION','tmp.1'))=0, 'REMARKS', 'DESCRIPTION');
		Let vL.prmKey = If(RangeSum(FieldNumber('PRIMARY_KEY','tmp.1'))=0, 'Null()', 'PRIMARY_KEY');
		Let vL.tpName = FieldNumber('TYPE_NAME','tmp.1') ;
		
		If vL.tpName=0 Then
			[tblDesc.Types]:
			Load *; SQLTYPES;
					
			[tblDesc]: NoConcatenate
			Load Distinct
				[$(vL.tblCat)] as TABLE_CATALOG, [$(vL.tblSchema)] as TABLE_SCHEMA
				, TABLE_NAME, COLUMN_NAME
				, ORDINAL_POSITION
				, LookUp('TYPE_NAME', 'DATA_TYPE', DATA_TYPE, 'tblDesc.Types')	as TYPE_NAME
				, [$(vL.clmnDesc)] AS DESCRIPTION
				, $(vL.prmKey) as PRIMARY_KEY
			Resident
				tmp.1
			Order By
				ORDINAL_POSITION
			; Drop tables [tblDesc.Types], tmp.1
			;
		Else
			[tblDesc]: NoConcatenate
			Load Distinct
				[$(vL.tblCat)] as TABLE_CATALOG, [$(vL.tblSchema)] as TABLE_SCHEMA, TABLE_NAME
				, COLUMN_NAME
				, TYPE_NAME
				, ORDINAL_POSITION
				, [$(vL.clmnDesc)] AS DESCRIPTION
				, $(vL.prmKey) as PRIMARY_KEY
			Resident
				[tmp.1]
			Order By
				ORDINAL_POSITION
			; Drop tables [tmp.1]
			;
		End If
		
		TRACE store data in $(vG.$(vL.UI.Server)ExtractPath) ;
		Store TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, TYPE_NAME, ORDINAL_POSITION, DESCRIPTION, PRIMARY_KEY from tblDesc into [$(vG.$(vL.UI.Server)ExtractPath)$(vL.tblDesc.File).qvd] (qvd);
		Drop table [tblDesc];
		
	End If


	map.FieldType: Mapping
	Load
		AutoNumberHash128(Upper(TABLE_CATALOG), Upper(TABLE_SCHEMA), Upper(TABLE_NAME), Upper(COLUMN_NAME))
		, Pick(WildMatch(TYPE_NAME,'*time*','*date*','*int*','*double*','*float*','*decimal*','*nume*','*')
								, 'TimeStamp([', 'Date(['
												, 'Num([', 'Num([', 'Num([', 'Num([', 'Num(['
																					, 'Text(['
		)
	From
		[$(vG.$(vL.UI.Server)ExtractPath)$(vL.tblDesc.File).qvd] (qvd);
	;

End Sub
